Smart Contract Lottery :-
# Emitting user defined events on any useful change can be useful
    > An event can have indexed (max 3) and non-indexed parameters
    > indexed parameters are easier to search for
    > The emitted event is stored in the EVM logs
    
# Getting a random number 
    https://docs.chain.link/docs/vrf/v2/subscription/examples/get-a-random-number/
        
# Hardhat Shorthand (for lesser typings to compile etc..)

# Chainlink Keepers is now called Chainlink Automation - will be used to automate the smart Contract

# Full Stack ->
> to see and update changes as per our requirements,
    > we run "hh node" to run the smart contract locally in the background
    > and also create an update-front-end deploy script to get updates in the front end automatically
> we add mockOffChain.js in the scripts of the smart contract 
    > yarn hardhat run scripts/mockOffChain.js --network localhost ---> to run (selects the winners)

> Deploying using IPFS
    > ipfs only hosts code, can't do any server stuff
    > first convert frontend to static page using "yarn build" and do "yarn next export"
    > above will fail if you have anything related to server like serversideprops etc.
    > the folder out will have all the static codes that can be used in ipfs
    > upload the out folder using ipfs desktop application
    > after upload set pinning for local node as true
    > copy its cid and in browser, type ipfs://<cid>

# Use this inplace of the steps above for deploying
> Easier way to add code to ipfs using fleek.co
> Go to fleek.co and deploy from github
