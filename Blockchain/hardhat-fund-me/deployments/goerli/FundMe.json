{
  "address": "0x1cDcb5F262E24FaDa1fFFEeC22a210CC5BF50750",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb2fdee724ecb0901383cc331bb9c9aff8d4504855878a543265d149dff748c50",
  "receipt": {
    "to": null,
    "from": "0x02843296B05F6a6E01E8315ff3F5f32EfDf46bA5",
    "contractAddress": "0x1cDcb5F262E24FaDa1fFFEeC22a210CC5BF50750",
    "transactionIndex": 48,
    "gasUsed": "1053690",
    "logsBloom": "0x
    "blockHash": "0xe651fa5838405ebd94f7634da555b030501d0881fdf28e8b970907435585252e",
    "transactionHash": "0xb2fdee724ecb0901383cc331bb9c9aff8d4504855878a543265d149dff748c50",
    "logs": [],
    "blockNumber": 7582185,
    "cumulativeGasUsed": "18463282",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "90d69014038345e4c88567b9c61bf7ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Aniket\",\"details\":\"[message for developers] This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FundMe - A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.9;\\n\\n// Imports\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// We can save gas by using custom errors instead of using require() which stores strings for error messages\\n// Error\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n// Below comment is useful for generating automatic documentation using:\\n// solc --userdoc --devdoc FundMe.sol\\n/**\\n * @title FundMe - A contract for crowd funding\\n * @author Aniket\\n * @notice This contract is to demo a sample funding contract\\n * @dev [message for developers] This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    // prefix storage variables with s_\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    // prefix immutable variables with i_ (not stored in storage)\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    // Modifier\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Only Owner can withdraw funds!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // Functions Order :-\\n    // constructor\\n    // receive\\n    // fallback\\n    // external\\n    // public\\n    // internal\\n    // private\\n    // view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender; // whoever deployed the contract\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        // setting funding amount of funders to 0\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length; // very expensive\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // reset funders array\\n        s_funders = new address[](0);\\n\\n        // withdraw the funds\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\"); // dataReturned will have any values from functions inside .call(..)\\n        require(callSuccess, \\\"Call Failed\\\");\\n\\n        // revert() -> we can revert transactions anywhere in code\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders; // copy in memory and read/write in that instead of storage\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0; // mapping can't be stored in memory, so we have to use storage only here\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // View/Pure functions\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x8948e81d8eaa7693fb6794302ccd0796471eb93ef80114567ea7e62b5d4a3df5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUSD;\\n    }\\n}\\n\",\"keccak256\":\"0x8f26cc6aa8b94ed50f23a9d9cd1310ac63942e5e9251c17e6814839259228d08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013323803806200133283398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b6080516111b26200018060003960008181610392015281816105e101528181610631015261082701526111b26000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610aea565b610321565b6040516100d79190610b30565b60405180910390f35b3480156100ec57600080fd5b506100f561036a565b6040516101029190610baa565b60405180910390f35b610113610390565b005b34801561012157600080fd5b5061012a6105d0565b6040516101379190610b30565b60405180910390f35b34801561014c57600080fd5b506101556105dd565b6040516101629190610bd4565b60405180910390f35b34801561017757600080fd5b50610180610605565b60405161018d9190610baa565b60405180910390f35b61019e6101e7565b005b6101a861062f565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610c1b565b6108bd565b6040516101de9190610bd4565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461090490919063ffffffff16565b11610266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025d90610ca5565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103189190610cf4565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610415576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104c057600080828154811061043a57610439610d4a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b890610d79565b915050610418565b50600067ffffffffffffffff8111156104dc576104db610dc2565b5b60405190808252806020026020018201604052801561050a5781602001602082028036833780820191505090505b50600090805190602001906105209291906109e0565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054790610e22565b60006040518083038185875af1925050503d8060008114610584576040519150601f19603f3d011682016040523d82523d6000602084013e610589565b606091505b50509050806105cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490610e83565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b4576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561073757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ed575b5050505050905060005b81518110156107c257600082828151811061075f5761075e610d4a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ba90610d79565b915050610741565b50600067ffffffffffffffff8111156107de576107dd610dc2565b5b60405190808252806020026020018201604052801561080c5781602001602082028036833780820191505090505b50600090805190602001906108229291906109e0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086990610e22565b60006040518083038185875af1925050503d80600081146108a6576040519150601f19603f3d011682016040523d82523d6000602084013e6108ab565b606091505b50509050806108b957600080fd5b5050565b60008082815481106108d2576108d1610d4a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061091083610940565b90506000670de0b6b3a764000085836109299190610ea3565b6109339190610f2c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098957600080fd5b505afa15801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c19190610fea565b5050509150506402540be400816109d89190611065565b915050919050565b828054828255906000526020600020908101928215610a59579160200282015b82811115610a585782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a00565b5b509050610a669190610a6a565b5090565b5b80821115610a83576000816000905550600101610a6b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab782610a8c565b9050919050565b610ac781610aac565b8114610ad257600080fd5b50565b600081359050610ae481610abe565b92915050565b600060208284031215610b0057610aff610a87565b5b6000610b0e84828501610ad5565b91505092915050565b6000819050919050565b610b2a81610b17565b82525050565b6000602082019050610b456000830184610b21565b92915050565b6000819050919050565b6000610b70610b6b610b6684610a8c565b610b4b565b610a8c565b9050919050565b6000610b8282610b55565b9050919050565b6000610b9482610b77565b9050919050565b610ba481610b89565b82525050565b6000602082019050610bbf6000830184610b9b565b92915050565b610bce81610aac565b82525050565b6000602082019050610be96000830184610bc5565b92915050565b610bf881610b17565b8114610c0357600080fd5b50565b600081359050610c1581610bef565b92915050565b600060208284031215610c3157610c30610a87565b5b6000610c3f84828501610c06565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c8f601b83610c48565b9150610c9a82610c59565b602082019050919050565b60006020820190508181036000830152610cbe81610c82565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cff82610b17565b9150610d0a83610b17565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3f57610d3e610cc5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d8482610b17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db757610db6610cc5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e0c600083610df1565b9150610e1782610dfc565b600082019050919050565b6000610e2d82610dff565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e6d600b83610c48565b9150610e7882610e37565b602082019050919050565b60006020820190508181036000830152610e9c81610e60565b9050919050565b6000610eae82610b17565b9150610eb983610b17565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ef257610ef1610cc5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3782610b17565b9150610f4283610b17565b925082610f5257610f51610efd565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7c81610f5d565b8114610f8757600080fd5b50565b600081519050610f9981610f73565b92915050565b6000819050919050565b610fb281610f9f565b8114610fbd57600080fd5b50565b600081519050610fcf81610fa9565b92915050565b600081519050610fe481610bef565b92915050565b600080600080600060a0868803121561100657611005610a87565b5b600061101488828901610f8a565b955050602061102588828901610fc0565b945050604061103688828901610fd5565b935050606061104788828901610fd5565b925050608061105888828901610f8a565b9150509295509295909350565b600061107082610f9f565b915061107b83610f9f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110ba576110b9610cc5565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110f7576110f6610cc5565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561113457611133610cc5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561117157611170610cc5565b5b82820290509291505056fea264697066735822122049b3add24162d2eaae6a5e79e4dc6e882cc16364d9455753af457edbcbf8ec9e64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610aea565b610321565b6040516100d79190610b30565b60405180910390f35b3480156100ec57600080fd5b506100f561036a565b6040516101029190610baa565b60405180910390f35b610113610390565b005b34801561012157600080fd5b5061012a6105d0565b6040516101379190610b30565b60405180910390f35b34801561014c57600080fd5b506101556105dd565b6040516101629190610bd4565b60405180910390f35b34801561017757600080fd5b50610180610605565b60405161018d9190610baa565b60405180910390f35b61019e6101e7565b005b6101a861062f565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610c1b565b6108bd565b6040516101de9190610bd4565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461090490919063ffffffff16565b11610266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025d90610ca5565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103189190610cf4565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610415576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104c057600080828154811061043a57610439610d4a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b890610d79565b915050610418565b50600067ffffffffffffffff8111156104dc576104db610dc2565b5b60405190808252806020026020018201604052801561050a5781602001602082028036833780820191505090505b50600090805190602001906105209291906109e0565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054790610e22565b60006040518083038185875af1925050503d8060008114610584576040519150601f19603f3d011682016040523d82523d6000602084013e610589565b606091505b50509050806105cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490610e83565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b4576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561073757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ed575b5050505050905060005b81518110156107c257600082828151811061075f5761075e610d4a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ba90610d79565b915050610741565b50600067ffffffffffffffff8111156107de576107dd610dc2565b5b60405190808252806020026020018201604052801561080c5781602001602082028036833780820191505090505b50600090805190602001906108229291906109e0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086990610e22565b60006040518083038185875af1925050503d80600081146108a6576040519150601f19603f3d011682016040523d82523d6000602084013e6108ab565b606091505b50509050806108b957600080fd5b5050565b60008082815481106108d2576108d1610d4a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061091083610940565b90506000670de0b6b3a764000085836109299190610ea3565b6109339190610f2c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098957600080fd5b505afa15801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c19190610fea565b5050509150506402540be400816109d89190611065565b915050919050565b828054828255906000526020600020908101928215610a59579160200282015b82811115610a585782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a00565b5b509050610a669190610a6a565b5090565b5b80821115610a83576000816000905550600101610a6b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab782610a8c565b9050919050565b610ac781610aac565b8114610ad257600080fd5b50565b600081359050610ae481610abe565b92915050565b600060208284031215610b0057610aff610a87565b5b6000610b0e84828501610ad5565b91505092915050565b6000819050919050565b610b2a81610b17565b82525050565b6000602082019050610b456000830184610b21565b92915050565b6000819050919050565b6000610b70610b6b610b6684610a8c565b610b4b565b610a8c565b9050919050565b6000610b8282610b55565b9050919050565b6000610b9482610b77565b9050919050565b610ba481610b89565b82525050565b6000602082019050610bbf6000830184610b9b565b92915050565b610bce81610aac565b82525050565b6000602082019050610be96000830184610bc5565b92915050565b610bf881610b17565b8114610c0357600080fd5b50565b600081359050610c1581610bef565b92915050565b600060208284031215610c3157610c30610a87565b5b6000610c3f84828501610c06565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c8f601b83610c48565b9150610c9a82610c59565b602082019050919050565b60006020820190508181036000830152610cbe81610c82565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cff82610b17565b9150610d0a83610b17565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3f57610d3e610cc5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d8482610b17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db757610db6610cc5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e0c600083610df1565b9150610e1782610dfc565b600082019050919050565b6000610e2d82610dff565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e6d600b83610c48565b9150610e7882610e37565b602082019050919050565b60006020820190508181036000830152610e9c81610e60565b9050919050565b6000610eae82610b17565b9150610eb983610b17565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ef257610ef1610cc5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3782610b17565b9150610f4283610b17565b925082610f5257610f51610efd565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7c81610f5d565b8114610f8757600080fd5b50565b600081519050610f9981610f73565b92915050565b6000819050919050565b610fb281610f9f565b8114610fbd57600080fd5b50565b600081519050610fcf81610fa9565b92915050565b600081519050610fe481610bef565b92915050565b600080600080600060a0868803121561100657611005610a87565b5b600061101488828901610f8a565b955050602061102588828901610fc0565b945050604061103688828901610fd5565b935050606061104788828901610fd5565b925050608061105888828901610f8a565b9150509295509295909350565b600061107082610f9f565b915061107b83610f9f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110ba576110b9610cc5565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110f7576110f6610cc5565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561113457611133610cc5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561117157611170610cc5565b5b82820290509291505056fea264697066735822122049b3add24162d2eaae6a5e79e4dc6e882cc16364d9455753af457edbcbf8ec9e64736f6c63430008090033",
  "devdoc": {
    "author": "Aniket",
    "details": "[message for developers] This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "FundMe - A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}