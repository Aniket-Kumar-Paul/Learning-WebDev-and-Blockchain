{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Pragma\npragma solidity ^0.8.9;\n\n// Imports\nimport \"./PriceConverter.sol\";\n\n// We can save gas by using custom errors instead of using require() which stores strings for error messages\n// Error\nerror FundMe__NotOwner();\n\n// Interfaces, Libraries, Contracts\n\n// Below comment is useful for generating automatic documentation using:\n// solc --userdoc --devdoc FundMe.sol\n/**\n * @title FundMe - A contract for crowd funding\n * @author Aniket\n * @notice This contract is to demo a sample funding contract\n * @dev [message for developers] This implements price feeds as our library\n */\n\ncontract FundMe {\n    // Type Declarations\n    using PriceConverter for uint256;\n\n    // State Variables\n    // prefix storage variables with s_\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    AggregatorV3Interface public s_priceFeed;\n\n    // prefix immutable variables with i_ (not stored in storage)\n    address private immutable i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    // Modifier\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"Only Owner can withdraw funds!\");\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    // Functions Order :-\n    // constructor\n    // receive\n    // fallback\n    // external\n    // public\n    // internal\n    // private\n    // view / pure\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender; // whoever deployed the contract\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice This function funds this contract\n     */\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\n            \"You need to spend more ETH!\"\n        );\n\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public payable onlyOwner {\n        // setting funding amount of funders to 0\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length; // very expensive\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        // reset funders array\n        s_funders = new address[](0);\n\n        // withdraw the funds\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\"); // dataReturned will have any values from functions inside .call(..)\n        require(callSuccess, \"Call Failed\");\n\n        // revert() -> we can revert transactions anywhere in code\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders; // copy in memory and read/write in that instead of storage\n\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0; // mapping can't be stored in memory, so we have to use storage only here\n        }\n        s_funders = new address[](0);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    // View/Pure functions\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUSD;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}