BASIC NFT :-
1. Use openzeppelin for the ERC721 contract
2. Mint NFT using _safeMint() function
3. Upload your image in IPFS and also the make a json file and upload in ipfs 
JSON file :-
{
    "name": "PUG",
    "description": "An adorable PUG pup!",
    "image": "https://ipfs.io/ipfs/QmSsYRx3LpDAb1GZQm7zZ1AuHZjfbPkD6J7s9r41xu1mf8?filename=pug.png",
    "attributes": [
        {
            "trait_type": "cuteness",
            "value": 100
        }
    ]
}

NOTE:- for the image, use ipfs://QmSsYRx3LpDAb1GZQm7zZ1AuHZjfbPkD6J7s9r41xu1mf8 instead
4. Create function tokenURI to get the tokenURI(the ipfs json file)
5. Create helper-hardhat-config.js, verify.js(in utils) & deploy script (hh deploy)
6. Create the test script and test (hh test)


RANDOM IPFS NFT :-
1. Getting random number using chainlink VRF 
2. Mapping chainlink VRF requests & _safeMint NFT
3. Creating Rare NFTs using a chance array
4. Setting the NFT Image 
    |_ we can create a mapping between dog breed and token URI  ..OR, 
    |_ use _setTokenURI function from the extension of openzeppelin's ERC721URIStorage.sol
        [NOTE: _setTokenURI isn't the most gas efficient operation]
5. Setting NFT Mint Price
6. Withdraw by owner (using modifier OR onlyOwner modifier of openzeppelin)
7. Writing get functions
8. Emitting events
9. Creating mock script 
10. Creating deploy script
11. Uploading token images (using Pinata here) and getting the tokenURIs
        |_ using IPFS 
        |_ Pinata
        |_ nft.storage (uses filecoin)
12. Set upload to pinata = true adn After deploying the script, copy the tokenURIs and hardcode in a list
   and set upload to pinata = false in env 
13. Fund the subscription in deploy script, and make test script

   
DYNAMIC SVG (ON-CHAIN NFT, instead of IPFS) :-
1. Create 2 svgs, If price of ETH is above X -> happy.svg, else frown.svg
2. Create the contract 
3. Encode the svg to a Base64 image url 
4. Similarly, make function to encode the json uri as well (tokenURI function)
5. Take a high value as input in mintNft function and also emit an event
6. Use chainlink price feed & the high value, to choose the corresponding imageURI
7. Add the chainlink price feed address in helper-hardhat & also mockv3aggregator for local
8. Make the deploy script (hh deploy --tags dynamicsvg,mocks)
9. Make the test script